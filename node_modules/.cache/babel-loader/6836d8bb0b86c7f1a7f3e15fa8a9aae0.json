{"ast":null,"code":"var _jsxFileName = \"/Users/robinyzewyn/Documents/Howest/Jaar3/Development/Passion_Project/Project/client/src/components/QRCamera.js\",\n    _s = $RefreshSig$();\n\nimport QrReader from 'react-qr-reader';\nimport { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\nexport default function QRCamera() {\n  _s();\n\n  const CONNECTION_PORT = \"localhost:3001/\";\n  useEffect(() => {\n    socket = io(CONNECTION_PORT);\n  }, [CONNECTION_PORT]);\n  const [result, setResult] = useState('');\n  useEffect(() => {\n    socket.on('successful_connection', amountPlayers => {\n      console.log('succes', amountPlayers);\n    });\n  });\n\n  const handleScan = data => {\n    if (data) {\n      setResult(data);\n      socket.emit('join_room', data);\n    }\n  };\n\n  const handleError = err => {\n    console.error(err);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Camera\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => changeInput(e),\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QrReader, {\n      delay: 300,\n      onError: handleError,\n      onScan: handleScan,\n      style: {\n        width: '30%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(QRCamera, \"u+2h8pxd+KJLXLUBehZ5BSMd5NQ=\");\n\n_c = QRCamera;\n\nvar _c;\n\n$RefreshReg$(_c, \"QRCamera\");","map":{"version":3,"sources":["/Users/robinyzewyn/Documents/Howest/Jaar3/Development/Passion_Project/Project/client/src/components/QRCamera.js"],"names":["QrReader","useState","useEffect","io","socket","QRCamera","CONNECTION_PORT","result","setResult","on","amountPlayers","console","log","handleScan","data","emit","handleError","err","error","e","changeInput","width"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,iBAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,EAAP,MAAe,kBAAf;;AACA,IAAIC,MAAJ;AAEA,eAAe,SAASC,QAAT,GAAmB;AAAA;;AAChC,QAAMC,eAAe,GAAG,iBAAxB;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,MAAM,GAAGD,EAAE,CAACG,eAAD,CAAX;AACD,GAFQ,EAEN,CAACA,eAAD,CAFM,CAAT;AAIA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACZE,IAAAA,MAAM,CAACK,EAAP,CAAU,uBAAV,EAAoCC,aAAD,IAAiB;AAClDC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,aAAtB;AACD,KAFD;AAGD,GAJQ,CAAT;;AAMA,QAAMG,UAAU,GAAGC,IAAI,IAAI;AACzB,QAAIA,IAAJ,EAAU;AACRN,MAAAA,SAAS,CAACM,IAAD,CAAT;AACAV,MAAAA,MAAM,CAACW,IAAP,CAAY,WAAZ,EAAyBD,IAAzB;AACD;AACF,GALD;;AAOA,QAAME,WAAW,GAAGC,GAAG,IAAI;AACzBN,IAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACD,GAFD;;AAKE,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,QAAQ,EAAGE,CAAD,IAAKC,WAAW,CAACD,CAAD,CAAjC;AAAsC,MAAA,IAAI,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAE,GAAjB;AAAsB,MAAA,OAAO,EAAEH,WAA/B;AAA4C,MAAA,MAAM,EAAEH,UAApD;AAAgE,MAAA,KAAK,EAAE;AAAEQ,QAAAA,KAAK,EAAE;AAAT;AAAvE;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,gBAAId;AAAJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GAlCuBF,Q;;KAAAA,Q","sourcesContent":["import QrReader from 'react-qr-reader'\nimport { useState, useEffect } from \"react\"\nimport io from \"socket.io-client\";\nlet socket;\n\nexport default function QRCamera(){\n  const CONNECTION_PORT = \"localhost:3001/\"\n  useEffect(() => {\n    socket = io(CONNECTION_PORT);\n  }, [CONNECTION_PORT]);\n\n  const [result, setResult] = useState('');\n\n  useEffect(()=>{\n    socket.on('successful_connection', (amountPlayers)=>{\n      console.log('succes', amountPlayers);\n    })\n  })\n\n  const handleScan = data => {\n    if (data) {\n      setResult(data);\n      socket.emit('join_room', data);\n    }    \n  }\n\n  const handleError = err => {\n    console.error(err)\n  }\n\n  \n    return (\n        <div>\n            <p>Camera</p>\n            <input onChange={(e)=>changeInput(e)} type=\"text\"/>\n            <QrReader delay={300} onError={handleError} onScan={handleScan} style={{ width: '30%' }}/>\n            <p>{result}</p>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}